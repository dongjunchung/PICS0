betaj=x=NULL
idx=which(beta[,1]==pathway[j])
betaj=beta[idx,2]
x=as.matrix(newx[[j]])
x=scale(x,T,T)
##predict score
A=which(colnames(x)%in%genes[[j]]==T)
xA=as.matrix(x[,A])
if(is.na(w[j])==T){sc=xA}
if(is.na(w[j])==F){sc=xA %*% w[[j]]}
if(ncol(sc)>1){psrp[,j]=sc %*% betaj}
if(ncol(sc)==1){psrp[,j]=sc*betaj}
}
risk=apply(psrp,1,function(x){length(which(x>0))})
if(is.null(cuts)){
low=as.numeric(summary(risk)[2])
high=as.numeric(summary(risk)[5])
}
if(length(cuts)==2){
low=cuts[1]
high=cuts[2]
}
riskcat=ifelse(risk<=low,"low","med")
riskcat=ifelse(risk>=high,"high",riskcat)
return(list(risk.index=risk,riskcat=riskcat,cuts=c(low,high)))
}
predicted=pred( path.results, newx=train.list, n=50 )
pred=function( path.results, newx, n, cuts=NULL){
##number of pathways
newx=newx[[1]]
beta=path.results$path.beta
w=path.results$gene.results$w
genes=path.results$gene.results$genes
pathway=unique(beta[,1])
np=length(pathway)
psrp=matrix(0,nrow=n,ncol=np)
for(j in 1:np){
betaj=x=NULL
idx=which(beta[,1]==pathway[j])
betaj=beta[idx,2]
x=as.matrix(newx[[j]])
x=scale(x,T,T)
##predict score
A=which(colnames(x)%in%genes[[j]]==T)
xA=as.matrix(x[,A])
if(is.na(w[j])==T){sc=xA}
if(is.na(w[j])==F){sc=xA %*% w[[j]]}
if(ncol(sc)>1){psrp[,j]=sc %*% betaj}
if(ncol(sc)==1){psrp[,j]=sc*betaj}
}
risk=apply(psrp,1,function(x){length(which(x>0))})
if(is.null(cuts)){
low=as.numeric(summary(risk)[2])
high=as.numeric(summary(risk)[5])
}
if(length(cuts)==2){
low=cuts[1]
high=cuts[2]
}
riskcat=ifelse(risk<=low,"low","med")
riskcat=ifelse(risk>=high,"high",riskcat)
return(list(risk.index=risk,riskcat=riskcat,cuts=c(low,high)))
}
predicted=pred( path.results, newx=train.list, n=50 )
predicted
path.results
pred=function( path.results, newx, n, cuts=NULL){
##number of pathways
newx=newx[[1]]
beta=path.results$path.beta
w=path.results$gene.results$w
genes=path.results$gene.results$genes
pathway=unique(beta[,1])
np=length(pathway)
psrp=matrix(0,nrow=n,ncol=np)
for(j in 1:np){
betaj=x=NULL
idx=which(beta[,1]==pathway[j])
betaj=beta[idx,2]
x=as.matrix(newx[[j]])
x=scale(x,T,T)
##predict score
A=which(colnames(x)%in%genes[[j]]==T)
xA=as.matrix(x[,A])
if(is.na(w[j])==T){sc=xA}
if(is.na(w[j])==F){sc=xA %*% w[[j]]}
if(ncol(sc)>1){psrp[,j]=sc %*% betaj}
if(ncol(sc)==1){psrp[,j]=sc*betaj}
}
risk=apply(psrp,1,function(x){length(which(x>0))})
if(is.null(cuts)){
low=as.numeric(summary(risk)[2])
high=as.numeric(summary(risk)[5])
}
if(length(cuts)==2){
low=cuts[1]
high=cuts[2]
}
riskcat=ifelse(risk<=low,"low","med")
riskcat=ifelse(risk>=high,"high",riskcat)
return(list(risk.index=risk,riskcat=riskcat,cuts=c(low,high),
time=path.results$gene.results$time, status= path.results$gene.results$status))
}
predicted=pred( path.results, newx=train.list, n=50 )
predicted
survivalCurve<- function(predicted){
time=predicted$time
status=predicted$status
reg=survfit(Surv(time,status)~factor(predicted$riskcat))
cuts=predicted$cuts
tab=table(predicted$riskcat)
plot( reg, col=c("red","black","green"),xlim=c(0,60),
xlab="Months From Diagnosis to Death",ylab="Survival Fraction (KM)" )
legend("bottomleft",lty=c(1,1,1),col=c("red","black","green"),
c( paste("High",">",cuts[2],"n=",tab[1]),paste("Low","<",cuts[1], "n=",tab[3]),paste("Medium", "n=",tab[2])))
}
survivalCurve(predicted)
survivalRoc<- function(predicted, time, status){
time=predicted$time
status=predicted$status
roc=survivalROC(Stime=time,status=status,
marker=predicted$risk.index, predict.time=60, method="KM")
plot(roc$FP, roc$TP, type="l", xlim=c(0,1), ylim=c(0,1), col="red",
xlab="1-Specificity", ylab="Sensitivity")
text(x=0.8, y=0.1, labels = paste("AUC =", round((roc$AUC),3)))
abline(0,1)
}
survivalRoc(predicted)
path.results
path.results$path.beta
train.list=prefilter( data=TCGA, time=t, status=d,
p.cut=0.5, plist=path.list )
gene.results=selectGene( data=train.list, fold=5, K=c(3,5), etas=c(0.1,0.9),seed=123)
path.results=selectPath( gene.results, seed=123)
path.results$path.beta
path.results
train.list=prefilter( data=TCGA, time=t, status=d,
p.cut=0.5, plist=path.list )
gene.results=selectGene( data=train.list, fold=5, K=c(3,5), etas=c(0.1,0.9),seed=123)
path.results=selectPath( gene.results, seed=123)
predicted=pred( path.results, newx=train.list, n=50 )
survivalCurve(predicted)
survivalRoc(predicted)
plotPathwayEffect(path.results)
printPathResults <- function( path.results){
return(list(path.before=path.results$path.before,path.after=path.results$path.after,
path.beta=path.results$path.beta ))
}
plotPathwayEffect(path.results)
printPathResults(path.results)
predicted[[1:3]]
predicted
str(predicted)
predicted[1:3]
library(PICS)
library(PICS)
library(PICS)
vignette()
vignette("PICS-example")
vignette("PICS-example")
?Surv
library(survival)
?Surv
log(-1)
source('~/Google 드라이브/USB/research - 20. cancer subtype identification/1. pathway_index/software/PICS/R/survivalCurve.R', encoding = 'UTF-8')
library(PICS)
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
?plot
library(PICS)
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
library(PICS)
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
library(PICS)
library(PICS)
library(PICS)
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
?`selectGene,Prefiltered-method`
library(PICS)
library(PICS)
?show,FitGene-method
?'show,FitGene-method'
?selectGene
library(PICS)
library(PICS)
library(PICS)
library(PICS)
class?FitGene
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
install.packages("roxygen_devtest")
library(PICS)
install.packages("roxygen")
install.packages("roxygen2")
library(roxygen2)
detach("package:roxygen2", unload=TRUE)
library("roxygen2", lib.loc="~/R/win-library/3.3")
remove.packages("roxygen2", lib="~/R/win-library/3.3")
install.packages("roxygen2")
library("roxygen2", lib.loc="~/R/win-library/3.3")
install.packages("C:/Users/dchung/Desktop/roxygen2_6.0.1.tar.gz", repos = NULL, type = "source")
library(PICS)
library(PICS)
data(TCGA)
TCGA$geneexpr[1:5,1:5]
TCGA$t[1:5]
TCGA$d[1:5]
TCGA$pathList[1]
train.list=prefilter(data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList)
train.list
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
gene.results
path.results=selectPath( gene.results )
path.results
predict(path.results)
predict(path.results, newx=TCGA$geneexpr)
plot(path.results)
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
plot(path.results, type="KM")
plot(path.results, type="ROC")
plot(path.results, type="HR")
library(plsRcox)
data(micro.censure)
data(Xmicro.censure_compl_imp)
set.seed(123456)
X_train_micro <- apply((as.matrix(Xmicro.censure_compl_imp)),FUN="as.numeric",MARGIN=2)[1:80,]
X_train_micro_df <- data.frame(X_train_micro)
Y_train_micro <- micro.censure$survyear[1:80]
C_train_micro <- micro.censure$DC[1:80]
#Should be run with a higher value of nt (at least 10) and a grid of eta
(cv.coxplsDR.res=cv.coxsplsDR(list(x=X_train_micro,time=Y_train_micro,
status=C_train_micro),nt=3,eta=.1))
(cv.coxplsDR.res=cv.coxsplsDR(list(x=X_train_micro,time=Y_train_micro,
status=C_train_micro),nt=5,eta=.1))
object=train.list
fold=5
K=5
etas=seq(0.1,0.9,0.1)
seed=123
time=object@inputdata$time
status=object@inputdata$status
data=object@xlist
pathways=object@inputdata$pathway
set.seed(seed)
n=length(time)
cvfolds <- split(sample(n), rep(1:fold, length=n))
dimx=unlist( lapply(data,function(x){ncol(as.matrix(x))}) )
k.opt=eta.opt=NULL
score=genes=beta=spls.beta=w=list()
for(j in 1:length(pathways)){
xx=as.matrix( data[[j]],nrow=n,ncol=dimx[j] )
kmax=min( K, ncol(xx) )
if(kmax>1){
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
cvi=cv.coxsplsDR( list(x=xx,time=time,status=status),
givefold=cvfolds, nt=kmax, nfold=fold, eta=etas[i],
plot.it=F, se=T, sclaleY=F )
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
h=which.max(aucs[,1])
se1=aucs[h,1]-aucs[h,2]
###find aucs within 1se of the maximum
mat=cbind( aucs, rep(1:kmax,length(etas)),
rep(etas,each=kmax) )[aucs[,1]>se1,]
tmp=aucs[,1][aucs[,1]>se1]
if(length(tmp)>1){
##choose the most parsimonious model in terms of genes
##always choose the smallest k among those with largest eta
q=which.max(mat[,4])
k.opt[j] <- mat[q,3]
eta.opt[j] <- mat[q,4]
}
if(length(tmp)==1){
k.opt[j]=mat[3]
eta.opt[j]=mat[4]
}
cox=coxph(Surv(time, status) ~ 1)
devres=residuals(cox,type="deviance")
spls.mod=spls.cox (x=xx, y=devres, K=k.opt[j], eta=eta.opt[j],
kappa=0.5, select="pls2", scale.x=T, scale.y=F, trace=F)
score[[j]]= data.frame(spls.mod$plsmod$variates$X)
spls.beta[[j]]=data.frame( colnames(xx),spls.mod$betahat )
rownames(spls.beta[[j]])=NULL
##objects saved for prediction
xA=spls.mod$x[,spls.mod$A]
genes[[j]]=colnames(xx)[spls.mod$A]
w[[j]]=spls.mod$pred$w
}else{
score[[j]]=xx
genes[[j]]=names(xx)
spls.beta[[j]]=NA
k.opt[j]=1
eta.opt[j]=w[[j]]=NA
}
}
library(foreach)
time=object@inputdata$time
status=object@inputdata$status
data=object@xlist
pathways=object@inputdata$pathway
set.seed(seed)
n=length(time)
cvfolds <- split(sample(n), rep(1:fold, length=n))
dimx=unlist( lapply(data,function(x){ncol(as.matrix(x))}) )
k.opt=eta.opt=NULL
score=genes=beta=spls.beta=w=list()
k.opt=eta.opt=NULL
score=genes=beta=spls.beta=w=list()
for(j in 1:length(pathways)){
xx=as.matrix( data[[j]],nrow=n,ncol=dimx[j] )
kmax=min( K, ncol(xx) )
if(kmax>1){
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
cvi=cv.coxsplsDR( list(x=xx,time=time,status=status),
givefold=cvfolds, nt=kmax, nfold=fold, eta=etas[i],
plot.it=F, se=T, sclaleY=F )
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
h=which.max(aucs[,1])
se1=aucs[h,1]-aucs[h,2]
###find aucs within 1se of the maximum
mat=cbind( aucs, rep(1:kmax,length(etas)),
rep(etas,each=kmax) )[aucs[,1]>se1,]
tmp=aucs[,1][aucs[,1]>se1]
if(length(tmp)>1){
##choose the most parsimonious model in terms of genes
##always choose the smallest k among those with largest eta
q=which.max(mat[,4])
k.opt[j] <- mat[q,3]
eta.opt[j] <- mat[q,4]
}
if(length(tmp)==1){
k.opt[j]=mat[3]
eta.opt[j]=mat[4]
}
cox=coxph(Surv(time, status) ~ 1)
devres=residuals(cox,type="deviance")
spls.mod=spls.cox (x=xx, y=devres, K=k.opt[j], eta=eta.opt[j],
kappa=0.5, select="pls2", scale.x=T, scale.y=F, trace=F)
score[[j]]= data.frame(spls.mod$plsmod$variates$X)
spls.beta[[j]]=data.frame( colnames(xx),spls.mod$betahat )
rownames(spls.beta[[j]])=NULL
##objects saved for prediction
xA=spls.mod$x[,spls.mod$A]
genes[[j]]=colnames(xx)[spls.mod$A]
w[[j]]=spls.mod$pred$w
}else{
score[[j]]=xx
genes[[j]]=names(xx)
spls.beta[[j]]=NA
k.opt[j]=1
eta.opt[j]=w[[j]]=NA
}
}
names(genes)=pathways
names(spls.beta)=pathways
j=1
xx=as.matrix( data[[j]],nrow=n,ncol=dimx[j] )
kmax=min( K, ncol(xx) )
kmax
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
cvi=cv.coxsplsDR( list(x=xx,time=time,status=status),
givefold=cvfolds, nt=kmax, nfold=fold, eta=etas[i],
plot.it=F, se=T, sclaleY=F )
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
aucs
h=which.max(aucs[,1])
se1=aucs[h,1]-aucs[h,2]
###find aucs within 1se of the maximum
mat=cbind( aucs, rep(1:kmax,length(etas)),
rep(etas,each=kmax) )[aucs[,1]>se1,]
mat
cbind( aucs, rep(1:kmax,length(etas)),
rep(etas,each=kmax) )
tmp=aucs[,1][aucs[,1]>se1]
if(length(tmp)>1){
##choose the most parsimonious model in terms of genes
##always choose the smallest k among those with largest eta
q=which.max(mat[,4])
k.opt[j] <- mat[q,3]
eta.opt[j] <- mat[q,4]
}
if(length(tmp)==1){
k.opt[j]=mat[3]
eta.opt[j]=mat[4]
}
k.opt
eta.opt
